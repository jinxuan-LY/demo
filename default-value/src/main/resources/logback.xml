<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" debug="false">
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
    <springProperty scope="context" name="LOG_HOME" source="logging.file.path"/>
    <property name="SINGLE_FILE_SIZE" value="512MB"/>
    <property name="MAX_SIZE" value="5GB"/>

    <property name="LOG_FILE_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS}[%X{pmtTraceId}][%thread][%level]%logger.%method : %line| %replace(%m){'[\n\r\t]',' '}%n"/>

    <!--定义日志文件的存储地址 勿在 LogBack 的#配置中使用相对路径-->
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${LOG_FILE_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <contextName>bank</contextName>

    <!-- 日志记录器，日期滚动记录 FILEALL -->
    <appender name="FILEALL"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/data.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <!--<fileNamePattern>${LOG_PATH}/all/log-all-%d{yyyy-MM-dd}.%i.log</fileNamePattern> -->
            <!--压缩日志文件 -->
            <fileNamePattern>${LOG_HOME}/log-data-%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <!--每个文件的大小限制-->
            <MaxFileSize>${SINGLE_FILE_SIZE}</MaxFileSize>
            <!--最多保留10天的文件，10天之前的将被清除-->
            <MaxHistory>2</MaxHistory>
            <!--该滚动策略日志的总大小，超过的日志会被清除-->
            <totalSizeCap>${MAX_SIZE}</totalSizeCap>
            <!--启动时清理日志文件  此项置灰清理超过保留天数的  也会清理超过总大小的-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FILE_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <appender name="FILEALL-ASYNC"
              class="com.shopee.banking.common.infra.log.MultiWorkersAsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为512 -->
        <queueSize>2048</queueSize>
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILEALL" />
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <includeCallerData>true</includeCallerData>
    </appender>

    <!-- cat监控 -->
    <appender name="catAppender" class="com.shopee.bcf.monitoring.cat.CatLogbackAppender"/>
    <!-- 数据库mapper -->
    <logger name="sql.com.shopee.bank.alto.infra.dal.dao" level="DEBUG"/>
    <!-- 调用payment-service -->
    <logger name = "com.shopee.bank.alto.infra.client.PaymentServiceClient" level="DEBUG"/>
    <!-- 打印事务管理的信息 -->
    <logger name = "org.springframework.jdbc.datasource.DataSourceTransactionManager" level="DEBUG"/>
    <logger name = "com.shopee.banking.common.gray.advice.common.GrayTagsLoadBalanceRule" level="DEBUG"/>

    <root level="info">
<!--        <appender-ref ref="FILEALL-ASYNC"/>-->
        <appender-ref ref="STDOUT" />
    </root>
</configuration>
